name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: feedback_db_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort mypy

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check code formatting with black
        run: |
          black --check app tests

      - name: Check import sorting with isort
        run: |
          isort --check-only app tests

      - name: Type checking with mypy
        run: |
          mypy app --ignore-missing-imports

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Set up test environment
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/feedback_db_test
          SECRET_KEY: test-secret-key-for-ci
          DEBUG: true
        run: |
          export DATABASE_URL=postgresql://postgres:password@localhost:5432/feedback_db_test
          export SECRET_KEY=test-secret-key-for-ci
          export DEBUG=true

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/feedback_db_test
          SECRET_KEY: test-secret-key-for-ci
          DEBUG: true
        run: |
          pytest tests/ -v --tb=short --cov=app --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Security scan with bandit
        run: |
          bandit -r app -f json -o bandit-report.json || true

      - name: Check dependencies for vulnerabilities
        run: |
          safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  docker-build:
    runs-on: ubuntu-latest
    needs: [lint-and-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t fastapi-feedback-app .

      - name: Test Docker image
        run: |
          # Start the application in background
          docker run -d --name test-app -p 8000:8000 \
            -e DATABASE_URL=sqlite:///./test.db \
            -e SECRET_KEY=test-secret \
            fastapi-feedback-app

          # Wait for application to start
          sleep 10

          # Test health endpoint
          curl -f http://localhost:8000/health || exit 1

          # Cleanup
          docker stop test-app
          docker rm test-app

  deployment-ready:
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan, docker-build]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deployment ready notification
        run: |
          echo "ðŸš€ All checks passed! Ready for deployment to production."
          echo "âœ… Tests passed"
          echo "âœ… Security scans completed"
          echo "âœ… Docker image built successfully"
